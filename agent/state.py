# agent/state.py
from typing import TypedDict, List, Optional, Dict, Any

# Tool-related data structures (might overlap/refine with tools/models.py later)
class ToolCall(TypedDict):
    """ Represents a planned tool call within the ReWOO plan. """
    tool_name: str # e.g., "web_search_placeholder/search"
    arguments: Dict[str, Any]

class ToolResult(TypedDict):
    """ Represents the output of a tool execution. """
    tool_name: str
    output: Any # The actual data returned by the tool
    error: Optional[str] # Any error message during execution

# ReWOO step-specific data structures
class PlanStep(TypedDict):
    """ Represents a single step in the reasoning plan. """
    thought: str # The reasoning/thought process for this step
    tool_call: Optional[ToolCall] # The tool call planned for this step, if any

class Evidence(TypedDict):
    """ Represents the evidence gathered from a tool execution, linked to a plan step. """
    step_index: int # The index of the plan step this evidence corresponds to
    tool_result: ToolResult # The result of the tool execution
    processed_evidence: str # A summary or processed form of the tool output (potentially LLM generated)

# LangGraph State Definition
class ReWOOState(TypedDict):
    """ Represents the overall state of the ReWOO agent execution graph. """
    input_query: str # The initial user query
    plan: List[PlanStep] # The step-by-step plan generated by the Planner
    current_step_index: int # Index of the plan step currently being processed
    # intermediate_steps: List[Tuple[AgentAction, Any]] # Alternative for ReACT style logging
    evidence: List[Evidence] # List of evidence gathered from tool calls
    final_answer: Optional[str] # The final answer generated by the Solver
    error: Optional[str] # Any critical error encountered during the process 